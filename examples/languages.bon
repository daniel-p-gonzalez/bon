# strong or weak type system?
class TypeSafety:
  Strong
  Weak

# types checked at compile type, or runtime?
class TypeChecking:
  Static
  Dynamic

class TypeSystem:
  TypeSystem(TypeSafety, TypeChecking)

def describe_language(lang):
  desc = lang.name ++ " is a programming language with:\n"

  desc = match lang.typing:
           TypeSystem(Strong, Static) => desc ++ "  - Strong, static type system\n"
           TypeSystem(Strong, Dynamic) => desc ++ "  - Strong, dynamic type system\n"
           TypeSystem(Weak, Static) => desc ++ "  - Weak, static type system\n"
           TypeSystem(Weak, Dynamic) => desc ++ "  - Weak, dynamic type system\n"

  desc = match lang.type_infer:
           true => desc ++ "  - Type Inference\n"
           false => desc

  desc = match lang.pattern_match:
           true => desc ++ "  - Pattern Matching\n"
           false => desc

  desc = desc ++ "  - Support for polymorphism through " ++ lang.polymorphism_support
  return desc ++ "\n"

class Language(Print):
  Language(name: string,
           typing: TypeSystem,
           type_infer: bool,
           pattern_match: bool,
           polymorphism_support: string)

  # implement printing and conversion to string for language type
  def to_string(lang: Language) -> string:
    lang.describe_language()

  def print(lang: Language) -> ():
    print(lang.to_string())

def main():
  bon = Language("Bon", TypeSystem(Strong, Static), true, true, "typeclasses")
  cpp = Language("C++", TypeSystem(Weak, Static), false, false, "classes")
  ocaml = Language("OCaml", TypeSystem(Strong, Static), true, true, "classes and modules")
  haskell = Language("Haskell", TypeSystem(Strong, Static), true, true, "typeclasses")
  elixir = Language("Elixir", TypeSystem(Strong, Dynamic), false, true, "protocols")
  rust = Language("Rust", TypeSystem(Strong, Static), true, true, "traits")
  python = Language("Python", TypeSystem(Strong, Dynamic), false, false, "classes")

  print(bon)
  print(cpp)
  print(ocaml)
  print(haskell)
  print(elixir)
  print(rust)
  print(python)

main()
