# ported from: https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/nbody-gcc-1.html

import time

class planet:
  Planet(x:float, y:float, z:float,
         vx:float, vy:float, vz:float,
         mass:float)

# to support "unsafe" access to vector of planets,
# need to provide an out_of_bounds impl for the planet type
impl BoundsCheck(planet):
  def out_of_bounds(template: planet) -> planet:
    # let's just fail hard if we index out of bounds:
    print("Accessed array out of bounds!")
    exit(-1)
    # won't get here
    return template

def advance(bodies):
  nbodies = bodies.len()
  dt = 0.01
  i = 0
  while i < nbodies:
    j = i + 1
    body = bodies[i]
    while j < nbodies:
      body2 = bodies[j]
      dx = body.x - body2.x
      dy = body.y - body2.y
      dz = body.z - body2.z
      distance = sqrt(dx * dx + dy * dy + dz * dz)
      mag = dt / (distance * distance * distance)
      body.vx = body.vx - dx * body2.mass * mag
      body.vy = body.vy - dy * body2.mass * mag
      body.vz = body.vz - dz * body2.mass * mag
      body2.vx = body2.vx + dx * body.mass * mag
      body2.vy = body2.vy + dy * body.mass * mag
      body2.vz = body2.vz + dz * body.mass * mag
      j = j + 1
    i = i + 1

  i = 0
  while i < nbodies:
    body = bodies[i]
    body.x = body.x + dt * body.vx
    body.y = body.y + dt * body.vy
    body.z = body.z + dt * body.vz
    i = i + 1

def energy(bodies):
  nbodies = bodies.len()
  e = 0.0
  i = 0
  while i < nbodies:
    body = bodies[i]
    e = e + 0.5 * body.mass * (body.vx * body.vx + body.vy * body.vy + body.vz * body.vz)
    j = i + 1
    while j < nbodies:
      body2 = bodies[j]
      dx = body.x - body2.x
      dy = body.y - body2.y
      dz = body.z - body2.z
      distance = sqrt(dx * dx + dy * dy + dz * dz)
      e = e - (body.mass * body2.mass) / distance
      j = j + 1
    i = i + 1
  return e

def offset_momentum(bodies):
  nbodies = bodies.len()
  pi = 3.141592653589793
  solar_mass = 4.0 * pi * pi
  i = 0
  body = bodies[0]
  while i < nbodies:
    body2 = bodies[i]
    body.vx = body.vx - (body2.vx * body2.mass) / solar_mass
    body.vy = body.vy - (body2.vy * body2.mass) / solar_mass
    body.vz = body.vz - (body2.vz * body2.mass) / solar_mass
    i = i + 1

def main():
  start_time = get_time()
  pi = 3.141592653589793
  solar_mass = 4.0 * pi * pi
  days_per_year = 365.24
  n = 50000000
#  n = 1000

  bodies = []
  # sun
  bodies.push(new Planet(0.0, 0.0, 0.0,
                         0.0, 0.0, 0.0,
                         solar_mass))
  # jupiter
  bodies.push(new Planet(4.84143144246472090, -1.16032004402742839, -0.103622044471123109,
                         0.00166007664274403694 * days_per_year,
                         0.00769901118419740425 * days_per_year,
                         -0.0000690460016972063023 * days_per_year,
                         0.000954791938424326609 * solar_mass))

  # saturn
  bodies.push(new Planet(8.34336671824457987, 4.12479856412430479, -0.403523417114321381,
                         -0.00276742510726862411 * days_per_year,
                         0.00499852801234917238 * days_per_year,
                         0.0000230417297573763929 * days_per_year,
                         0.000285885980666130812 * solar_mass))

  # uranus
  bodies.push(new Planet(12.8943695621391310, -15.1111514016986312, -0.223307578892655734,
                         0.00296460137564761618 * days_per_year,
                         0.00237847173959480950 * days_per_year,
                         -0.0000296589568540237556 * days_per_year,
                         0.0000436624404335156298 * solar_mass))

  # neptune
  bodies.push(new Planet(15.3796971148509165, -25.9193146099879641, 0.179258772950371181,
                         0.00268067772490389322 * days_per_year,
                         0.00162824170038242295 * days_per_year,
                         -0.0000951592254519715870 * days_per_year,
                         0.0000515138902046611451 * solar_mass))

  offset_momentum(bodies)
  print(energy(bodies))
  i = 0
  while i < n:
    advance(bodies)
    i = i + 1
  print(energy(bodies))
  total_time = get_time() - start_time
  print("Finished in " ++ (total_time/1000).str() ++ "ms")

main()
