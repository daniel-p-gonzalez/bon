cdef malloc(int) -> pointer
cdef memcpy(pointer, pointer, int) -> ()
cdef free(pointer) -> ()
cdef null_ptr() -> pointer

class vec:
  Vec(size:int, capacity:int, data:pointer)

def vec():
  v = new Vec(0, 0, null_ptr())
  return v

def push(v:vec, *item) -> ():
  if v.size+1 > v.capacity:
    old_size = sizeof(item) * v.capacity
    new_size = if v.capacity == 0: sizeof(item) * 2 else: old_size * 2
    new_data = malloc(new_size)
    memcpy(new_data, v.data, old_size)
    free(v.data)
    v.data = new_data
    v.capacity = if v.capacity == 0: 2 else: v.capacity * 2
  ptr_offset(v.data, v.size) = item
  v.size = v.size + 1

  return ()

def at(v:vec, index:int):
  if index < v.size:
    new Some(ptr_offset(v.data, index))
  else:
    new None

def unsafe_at(v:vec, index:int):
  if index >= v.size:
    # TODO: this is still unsafe if size==0
    # ideally this should be something like:
    #  out_of_bounds<pointer_element_type(v.data)>()
    out_of_bounds(ptr_offset(v.data, 0))
  else:
    ptr_offset(v.data, index)

def erase(v:vec, index:int) -> ():
  if v.size > index+1:
    cur = index+1
    while cur < v.size:
      v[cur-1] = v[cur]
      cur = cur + 1
  v.size = v.size - 1

  return ()

def swap(v:vec, i:int, j:int):
  tmp = ptr_offset(v.data, i)
  ptr_offset(v.data, i) = ptr_offset(v.data, j)
  ptr_offset(v.data, j) = tmp

def set(v:vec, i:int, item) -> ():
  if i < v.size:
    ptr_offset(v.data, i) = item

  return ()

def len(v:vec) -> int:
  return v.size

# convenience functions to simplify compiler
# TODO: this is a temporary solution
def vec1(arg1):
    v = new Vec(0, 0, null_ptr())
    v.push(arg1)
    return v

def vec2(arg1, arg2):
    v = new Vec(0, 0, null_ptr())
    v.push(arg1)
    v.push(arg2)
    return v

def vec3(arg1, arg2, arg3):
    v = new Vec(0, 0, null_ptr())
    v.push(arg1)
    v.push(arg2)
    v.push(arg3)
    return v

def vec4(arg1, arg2, arg3, arg4):
    v = new Vec(0, 0, null_ptr())
    v.push(arg1)
    v.push(arg2)
    v.push(arg3)
    v.push(arg4)
    return v

def vec5(arg1, arg2, arg3, arg4, arg5):
    v = new Vec(0, 0, null_ptr())
    v.push(arg1)
    v.push(arg2)
    v.push(arg3)
    v.push(arg4)
    v.push(arg5)
    return v

def vec6(arg1, arg2, arg3, arg4, arg5, arg6):
    v = new Vec(0, 0, null_ptr())
    v.push(arg1)
    v.push(arg2)
    v.push(arg3)
    v.push(arg4)
    v.push(arg5)
    v.push(arg6)
    return v

def vec7(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    v = new Vec(0, 0, null_ptr())
    v.push(arg1)
    v.push(arg2)
    v.push(arg3)
    v.push(arg4)
    v.push(arg5)
    v.push(arg6)
    v.push(arg7)
    return v

def vec8(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    v = new Vec(0, 0, null_ptr())
    v.push(arg1)
    v.push(arg2)
    v.push(arg3)
    v.push(arg4)
    v.push(arg5)
    v.push(arg6)
    v.push(arg7)
    v.push(arg8)
    return v

def vec9(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    v = new Vec(0, 0, null_ptr())
    v.push(arg1)
    v.push(arg2)
    v.push(arg3)
    v.push(arg4)
    v.push(arg5)
    v.push(arg6)
    v.push(arg7)
    v.push(arg8)
    v.push(arg9)
    return v

def vec10(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    v = new Vec(0, 0, null_ptr())
    v.push(arg1)
    v.push(arg2)
    v.push(arg3)
    v.push(arg4)
    v.push(arg5)
    v.push(arg6)
    v.push(arg7)
    v.push(arg8)
    v.push(arg9)
    v.push(arg10)
    return v

def vec11(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11):
    v = new Vec(0, 0, null_ptr())
    v.push(arg1)
    v.push(arg2)
    v.push(arg3)
    v.push(arg4)
    v.push(arg5)
    v.push(arg6)
    v.push(arg7)
    v.push(arg8)
    v.push(arg9)
    v.push(arg10)
    v.push(arg11)
    return v

def vec12(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    v = new Vec(0, 0, null_ptr())
    v.push(arg1)
    v.push(arg2)
    v.push(arg3)
    v.push(arg4)
    v.push(arg5)
    v.push(arg6)
    v.push(arg7)
    v.push(arg8)
    v.push(arg9)
    v.push(arg10)
    v.push(arg11)
    v.push(arg12)
    return v

def vec13(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    v = new Vec(0, 0, null_ptr())
    v.push(arg1)
    v.push(arg2)
    v.push(arg3)
    v.push(arg4)
    v.push(arg5)
    v.push(arg6)
    v.push(arg7)
    v.push(arg8)
    v.push(arg9)
    v.push(arg10)
    v.push(arg11)
    v.push(arg12)
    v.push(arg13)
    return v

def vec14(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14):
    v = new Vec(0, 0, null_ptr())
    v.push(arg1)
    v.push(arg2)
    v.push(arg3)
    v.push(arg4)
    v.push(arg5)
    v.push(arg6)
    v.push(arg7)
    v.push(arg8)
    v.push(arg9)
    v.push(arg10)
    v.push(arg11)
    v.push(arg12)
    v.push(arg13)
    v.push(arg14)
    return v

def vec15(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15):
    v = new Vec(0, 0, null_ptr())
    v.push(arg1)
    v.push(arg2)
    v.push(arg3)
    v.push(arg4)
    v.push(arg5)
    v.push(arg6)
    v.push(arg7)
    v.push(arg8)
    v.push(arg9)
    v.push(arg10)
    v.push(arg11)
    v.push(arg12)
    v.push(arg13)
    v.push(arg14)
    v.push(arg15)
    return v

def vec16(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16):
    v = new Vec(0, 0, null_ptr())
    v.push(arg1)
    v.push(arg2)
    v.push(arg3)
    v.push(arg4)
    v.push(arg5)
    v.push(arg6)
    v.push(arg7)
    v.push(arg8)
    v.push(arg9)
    v.push(arg10)
    v.push(arg11)
    v.push(arg12)
    v.push(arg13)
    v.push(arg14)
    v.push(arg15)
    v.push(arg16)
    return v

def vec17(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17):
    v = new Vec(0, 0, null_ptr())
    v.push(arg1)
    v.push(arg2)
    v.push(arg3)
    v.push(arg4)
    v.push(arg5)
    v.push(arg6)
    v.push(arg7)
    v.push(arg8)
    v.push(arg9)
    v.push(arg10)
    v.push(arg11)
    v.push(arg12)
    v.push(arg13)
    v.push(arg14)
    v.push(arg15)
    v.push(arg16)
    v.push(arg17)
    return v
