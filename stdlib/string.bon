cdef print_string(str:string) -> ()
cdef write_string(str:string) -> ()
cdef cstrconcat(a:string, b:string) -> string
cdef cstrcmp(str1:string, str2:string) -> int
cdef cstreq(str1:string, str2:string) -> bool
cdef cfind(str:string, substr:string, from_pos:int) -> int
cdef csubstr(str:string, start:int, num_chars:int) -> string
cdef cstr_at(str:string, index:int) -> string
cdef cstrlen(str:string) -> int
cdef strip(str:string) -> string
cdef lstrip(str:string) -> string
cdef rstrip(str:string) -> string
cdef cstr_ord(str:string) -> int
cdef string_to_int(str:string) -> int
cdef string_to_float(str:string) -> float

# TODO: change to option type
def find(str:string, substr:string) -> int:
  return cfind(str, substr, 0)

def find_next(str:string, substr:string, from_pos:int) -> int:
  return cfind(str, substr, from_pos+1)

def substr(str:string, start:int, num_chars:int) -> string:
  return csubstr(str, start, num_chars)

def strlen(str:string) -> int:
  return cstrlen(str)

def char_at(str:string, index:int):
  return csubstr(str, index, 1)

def split(str:string, delim:string):
  v = []
  skip_len = delim.strlen()
  token_start = 0
  pos = str.find(delim)
  while pos != -1:
    substr = str.substr(token_start, pos-token_start)
    v.push(substr)
    token_start = pos+skip_len
    pos = str.find_next(delim, pos)
  substr = str.substr(token_start, str.strlen()-token_start)
  v.push(substr)
  return v

def ord(str:string) -> int:
  if cstrlen(str) == 1:
    cstr_ord(str)
  else:
    -1

def hash(str:string) -> int:
  hash = 14695981039346656037
  i = 0
  while i < str.strlen():
    hash = hash ^ str.char_at(i).ord()
    hash = hash * 1099511628211
    i = i + 1

  # TODO: this abs is needed until uint is supported
  return abs(hash)

impl Concat(string):
  def operator++(a:string, b:string) -> string:
    return cstrconcat(a,b)

impl Eq(string):
  def operator==(a:string, b:string) -> bool:
    return cstrcmp(a,b) == 0

  def operator!=(a:string, b:string) -> bool:
    return cstrcmp(a,b) != 0

impl Ord(string):
  def operator>(a:string, b:string) -> bool:
    return cstrcmp(a,b) > 0

  def operator<(a:string, b:string) -> bool:
    return cstrcmp(a,b) < 0

  def operator>=(a:string, b:string) -> bool:
    return cstrcmp(a,b) >= 0

  def operator<=(a:string, b:string) -> bool:
    return cstrcmp(a,b) <= 0

impl Integer(string):
  def to_integer(str:string) -> int:
    return string_to_int(str)

impl Float(string):
  def to_float(str:string) -> float:
    string_to_float(str)

impl Print(string):
  def to_string(x:string) -> string:
    return x

  def print(x:string) -> ():
    print_string(x)

  def write(x:string) -> ():
    write_string(x)

impl BoundsCheck(string):
  def out_of_bounds(template:string) -> string:
    template
    return ""
