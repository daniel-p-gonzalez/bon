# TODO: state should be uint64, not int64
class rng:
    RNG(state0:int, state1:int)

# xorshift128+
def xorshift128plus(r:rng) -> int:
    x = r.state0
    y = r.state1
    r.state0 = y
    x = x ^ (x << 23)
    r.state1 = x ^ y ^ (x >> 17) ^ (y >> 26)
    return r.state1 + y

# without function inlining, this is a bit slower
# def rotl(x, k)
#   (x << k) | (x >> (64 - k))
# end

# TODO: replace with xoshiro256**
# xoroshiro128+
def rand(r:rng) -> int:
  s0 = r.state0
  s1 = r.state1
  result = s0 + s1

  s1 = s1 ^ s0
  r.state0 = ((s0 << 24) | (s0 >> (64 - 24))) ^ s1 ^ (s1 << 16)
  r.state1 = (s1 << 37) | (s1 >> (64 - 37))

  # without function inlining, this is a bit slower than the above
  # r.state0 = rotl(s0, 24) ^ s1 ^ (s1 << 16)
  # r.state1 = rotl(s1, 37)

  return result

# xorshift64
def simple_rand(r:rng) -> int:
  x = r.state0
  x = x ^ (x << 13)
  x = x ^ (x >> 7)
  x = x ^ (x << 17)
  r.state0 = x
  return x

def random_generator(seed:int):
  srand = RNG(seed, seed)
  seed0 = seed + srand.simple_rand()
  seed1 = seed + srand.simple_rand()
  return new RNG(seed0, seed1)
